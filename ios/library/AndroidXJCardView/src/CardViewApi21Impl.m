//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidXJCardView\src\main\java\androidx\cardview\widget\CardViewApi21Impl.java
//

#include "CardViewApi21Impl.h"
#include "CardViewDelegate.h"
#include "ColorStateList.h"
#include "Context.h"
#include "Drawable.h"
#include "J2ObjC_source.h"
#include "RoundRectDrawable.h"
#include "RoundRectDrawableWithShadow.h"
#include "View.h"
#include "java/lang/Math.h"


@interface ADXCardViewApi21Impl ()

- (ADXRoundRectDrawable *)getCardBackgroundWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView;

@end

__attribute__((unused)) static ADXRoundRectDrawable *ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(ADXCardViewApi21Impl *self, id<ADXCardViewDelegate> cardView);

@implementation ADXCardViewApi21Impl

- (instancetype)initPackagePrivate {
  ADXCardViewApi21Impl_initPackagePrivate(self);
  return self;
}

- (void)initialize__WithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView
                              withADContext:(ADContext *)context
                       withADColorStateList:(ADColorStateList *)backgroundColor
                                  withFloat:(jfloat)radius
                                  withFloat:(jfloat)elevation
                                  withFloat:(jfloat)maxElevation {
  ADXRoundRectDrawable *background = create_ADXRoundRectDrawable_initPackagePrivateWithADColorStateList_withFloat_(backgroundColor, radius);
  [((id<ADXCardViewDelegate>) nil_chk(cardView)) setCardBackgroundWithADDrawable:background];
  ADView *view = JreRetainedLocalValue([cardView getCardView]);
  [((ADView *) nil_chk(view)) setElevationWithFloat:elevation];
  [self setMaxElevationWithADXCardViewDelegate:cardView withFloat:maxElevation];
}

- (void)setRadiusWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView
                               withFloat:(jfloat)radius {
  [((ADXRoundRectDrawable *) nil_chk(ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(self, cardView))) setRadiusWithFloat:radius];
}

- (void)initStatic {
}

- (void)setMaxElevationWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView
                                     withFloat:(jfloat)maxElevation {
  [((ADXRoundRectDrawable *) nil_chk(ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(self, cardView))) setPaddingWithFloat:maxElevation withBoolean:[((id<ADXCardViewDelegate>) nil_chk(cardView)) getUseCompatPadding] withBoolean:[cardView getPreventCornerOverlap]];
  [self updatePaddingWithADXCardViewDelegate:cardView];
}

- (jfloat)getMaxElevationWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  return [((ADXRoundRectDrawable *) nil_chk(ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(self, cardView))) getPadding];
}

- (jfloat)getMinWidthWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  return [self getRadiusWithADXCardViewDelegate:cardView] * 2;
}

- (jfloat)getMinHeightWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  return [self getRadiusWithADXCardViewDelegate:cardView] * 2;
}

- (jfloat)getRadiusWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  return [((ADXRoundRectDrawable *) nil_chk(ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(self, cardView))) getRadius];
}

- (void)setElevationWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView
                                  withFloat:(jfloat)elevation {
  [((ADView *) nil_chk([((id<ADXCardViewDelegate>) nil_chk(cardView)) getCardView])) setElevationWithFloat:elevation];
}

- (jfloat)getElevationWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  return [((ADView *) nil_chk([((id<ADXCardViewDelegate>) nil_chk(cardView)) getCardView])) getElevation];
}

- (void)updatePaddingWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  if (![((id<ADXCardViewDelegate>) nil_chk(cardView)) getUseCompatPadding]) {
    [cardView setShadowPaddingWithInt:0 withInt:0 withInt:0 withInt:0];
    return;
  }
  jfloat elevation = [self getMaxElevationWithADXCardViewDelegate:cardView];
  jfloat radius = [self getRadiusWithADXCardViewDelegate:cardView];
  jint hPadding = JreFpToInt(JavaLangMath_ceilWithDouble_(ADXRoundRectDrawableWithShadow_calculateHorizontalPaddingWithFloat_withFloat_withBoolean_(elevation, radius, [cardView getPreventCornerOverlap])));
  jint vPadding = JreFpToInt(JavaLangMath_ceilWithDouble_(ADXRoundRectDrawableWithShadow_calculateVerticalPaddingWithFloat_withFloat_withBoolean_(elevation, radius, [cardView getPreventCornerOverlap])));
  [cardView setShadowPaddingWithInt:hPadding withInt:vPadding withInt:hPadding withInt:vPadding];
}

- (void)onCompatPaddingChangedWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  [self setMaxElevationWithADXCardViewDelegate:cardView withFloat:[self getMaxElevationWithADXCardViewDelegate:cardView]];
}

- (void)onPreventCornerOverlapChangedWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  [self setMaxElevationWithADXCardViewDelegate:cardView withFloat:[self getMaxElevationWithADXCardViewDelegate:cardView]];
}

- (void)setBackgroundColorWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView
                             withADColorStateList:(ADColorStateList *)color {
  [((ADXRoundRectDrawable *) nil_chk(ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(self, cardView))) setColorWithADColorStateList:color];
}

- (ADColorStateList *)getBackgroundColorWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  return [((ADXRoundRectDrawable *) nil_chk(ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(self, cardView))) getColor];
}

- (ADXRoundRectDrawable *)getCardBackgroundWithADXCardViewDelegate:(id<ADXCardViewDelegate>)cardView {
  return ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(self, cardView);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 11, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, 17, 6, -1, -1, -1, -1 },
    { NULL, "LADXRoundRectDrawable;", 0x2, 18, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initialize__WithADXCardViewDelegate:withADContext:withADColorStateList:withFloat:withFloat:withFloat:);
  methods[2].selector = @selector(setRadiusWithADXCardViewDelegate:withFloat:);
  methods[3].selector = @selector(initStatic);
  methods[4].selector = @selector(setMaxElevationWithADXCardViewDelegate:withFloat:);
  methods[5].selector = @selector(getMaxElevationWithADXCardViewDelegate:);
  methods[6].selector = @selector(getMinWidthWithADXCardViewDelegate:);
  methods[7].selector = @selector(getMinHeightWithADXCardViewDelegate:);
  methods[8].selector = @selector(getRadiusWithADXCardViewDelegate:);
  methods[9].selector = @selector(setElevationWithADXCardViewDelegate:withFloat:);
  methods[10].selector = @selector(getElevationWithADXCardViewDelegate:);
  methods[11].selector = @selector(updatePaddingWithADXCardViewDelegate:);
  methods[12].selector = @selector(onCompatPaddingChangedWithADXCardViewDelegate:);
  methods[13].selector = @selector(onPreventCornerOverlapChangedWithADXCardViewDelegate:);
  methods[14].selector = @selector(setBackgroundColorWithADXCardViewDelegate:withADColorStateList:);
  methods[15].selector = @selector(getBackgroundColorWithADXCardViewDelegate:);
  methods[16].selector = @selector(getCardBackgroundWithADXCardViewDelegate:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "initialize", "LADXCardViewDelegate;LADContext;LADColorStateList;FFF", "setRadius", "LADXCardViewDelegate;F", "setMaxElevation", "getMaxElevation", "LADXCardViewDelegate;", "getMinWidth", "getMinHeight", "getRadius", "setElevation", "getElevation", "updatePadding", "onCompatPaddingChanged", "onPreventCornerOverlapChanged", "setBackgroundColor", "LADXCardViewDelegate;LADColorStateList;", "getBackgroundColor", "getCardBackground" };
  static const J2ObjcClassInfo _ADXCardViewApi21Impl = { "CardViewApi21Impl", "androidx.cardview.widget", ptrTable, methods, NULL, 7, 0x0, 17, 0, -1, -1, -1, -1, -1 };
  return &_ADXCardViewApi21Impl;
}

@end

void ADXCardViewApi21Impl_initPackagePrivate(ADXCardViewApi21Impl *self) {
  NSObject_init(self);
}

ADXCardViewApi21Impl *new_ADXCardViewApi21Impl_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ADXCardViewApi21Impl, initPackagePrivate)
}

ADXCardViewApi21Impl *create_ADXCardViewApi21Impl_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ADXCardViewApi21Impl, initPackagePrivate)
}

ADXRoundRectDrawable *ADXCardViewApi21Impl_getCardBackgroundWithADXCardViewDelegate_(ADXCardViewApi21Impl *self, id<ADXCardViewDelegate> cardView) {
  return ((ADXRoundRectDrawable *) cast_chk([((id<ADXCardViewDelegate>) nil_chk(cardView)) getCardBackground], [ADXRoundRectDrawable class]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCardViewApi21Impl)
