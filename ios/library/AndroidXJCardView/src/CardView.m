//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidXJCardView\src\main\java\androidx\cardview\widget\CardView.java
//

#include "CardView.h"
#include "CardViewApi21Impl.h"
#include "CardViewDelegate.h"
#include "CardViewImpl.h"
#include "Color.h"
#include "ColorDrawable.h"
#include "ColorStateList.h"
#include "Context.h"
#include "Drawable.h"
#include "FrameLayout.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"

static void (*ADXCardView_super$_setPaddingWithInt_withInt_withInt_withInt_)(id, SEL, jint, jint, jint, jint);

static void (*ADXCardView_super$_setMinimumWidthWithInt_)(id, SEL, jint);

static void (*ADXCardView_super$_setMinimumHeightWithInt_)(id, SEL, jint);


@interface ADXCardView () {
 @public
  jboolean mCompatPadding_;
  jboolean mPreventCornerOverlap_;
  id<ADXCardViewDelegate> mCardViewDelegate_;
}

- (void)setBackgroundDrawableWithADDrawable:(ADDrawable *)drawable;

- (void)setBackgroundColorWithADColorStateList:(ADColorStateList *)color;

@end

J2OBJC_FIELD_SETTER(ADXCardView, mCardViewDelegate_, id<ADXCardViewDelegate>)

inline id<ADXCardViewImpl> ADXCardView_get_IMPL(void);
static id<ADXCardViewImpl> ADXCardView_IMPL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXCardView, IMPL, id<ADXCardViewImpl>)

__attribute__((unused)) static void ADXCardView_setBackgroundDrawableWithADDrawable_(ADXCardView *self, ADDrawable *drawable);

__attribute__((unused)) static void ADXCardView_setBackgroundColorWithADColorStateList_(ADXCardView *self, ADColorStateList *color);

@interface ADXCardView_1 : NSObject < ADXCardViewDelegate > {
 @public
  ADXCardView *this$0_;
  ADDrawable *mCardBackground_;
}

- (instancetype)initWithADXCardView:(ADXCardView *)outer$;

- (void)setCardBackgroundWithADDrawable:(ADDrawable *)drawable;

- (jboolean)getUseCompatPadding;

- (jboolean)getPreventCornerOverlap;

- (void)setShadowPaddingWithInt:(jint)left
                        withInt:(jint)top
                        withInt:(jint)right
                        withInt:(jint)bottom;

- (void)setMinWidthHeightInternalWithInt:(jint)width
                                 withInt:(jint)height;

- (ADDrawable *)getCardBackground;

- (ADView *)getCardView;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCardView_1)

J2OBJC_FIELD_SETTER(ADXCardView_1, mCardBackground_, ADDrawable *)

__attribute__((unused)) static void ADXCardView_1_initWithADXCardView_(ADXCardView_1 *self, ADXCardView *outer$);

__attribute__((unused)) static ADXCardView_1 *new_ADXCardView_1_initWithADXCardView_(ADXCardView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXCardView_1 *create_ADXCardView_1_initWithADXCardView_(ADXCardView *outer$);

J2OBJC_INITIALIZED_DEFN(ADXCardView)

@implementation ADXCardView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCardView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setPaddingWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom {
}

- (void)setPaddingRelativeWithInt:(jint)start
                          withInt:(jint)top
                          withInt:(jint)end
                          withInt:(jint)bottom {
}

- (jboolean)getUseCompatPadding {
  return mCompatPadding_;
}

- (void)setUseCompatPaddingWithBoolean:(jboolean)useCompatPadding {
  if (mCompatPadding_ != useCompatPadding) {
    mCompatPadding_ = useCompatPadding;
    [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) onCompatPaddingChangedWithADXCardViewDelegate:mCardViewDelegate_];
  }
}

- (void)setContentPaddingWithInt:(jint)left
                         withInt:(jint)top
                         withInt:(jint)right
                         withInt:(jint)bottom {
  [((ADRect *) nil_chk(mContentPadding_)) setWithInt:left withInt:top withInt:right withInt:bottom];
  [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) updatePaddingWithADXCardViewDelegate:mCardViewDelegate_];
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (!([ADXCardView_IMPL isKindOfClass:[ADXCardViewApi21Impl class]])) {
    jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
    {
      jint minWidth;
      switch (widthMode) {
        case ADView_MeasureSpec_EXACTLY:
        case ADView_MeasureSpec_AT_MOST:
        minWidth = JreFpToInt(JavaLangMath_ceilWithDouble_([((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) getMinWidthWithADXCardViewDelegate:mCardViewDelegate_]));
        widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(minWidth, ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec)), widthMode);
        break;
        case ADView_MeasureSpec_UNSPECIFIED:
        break;
      }
    }
    jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
    {
      jint minHeight;
      switch (heightMode) {
        case ADView_MeasureSpec_EXACTLY:
        case ADView_MeasureSpec_AT_MOST:
        minHeight = JreFpToInt(JavaLangMath_ceilWithDouble_([((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) getMinHeightWithADXCardViewDelegate:mCardViewDelegate_]));
        heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(minHeight, ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec)), heightMode);
        break;
        case ADView_MeasureSpec_UNSPECIFIED:
        break;
      }
    }
    [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
  else {
    [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
}

- (void)setMinimumWidthWithInt:(jint)minWidth {
  mUserSetMinWidth_ = minWidth;
  [super setMinimumWidthWithInt:minWidth];
}

- (void)setMinimumHeightWithInt:(jint)minHeight {
  mUserSetMinHeight_ = minHeight;
  [super setMinimumHeightWithInt:minHeight];
}

- (void)setCardBackgroundColorWithInt:(jint)color {
  [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) setBackgroundColorWithADXCardViewDelegate:mCardViewDelegate_ withADColorStateList:ADColorStateList_valueOfWithInt_(color)];
}

- (void)setCardBackgroundColorWithADColorStateList:(ADColorStateList *)color {
  [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) setBackgroundColorWithADXCardViewDelegate:mCardViewDelegate_ withADColorStateList:color];
  ADXCardView_setBackgroundColorWithADColorStateList_(self, color);
}

- (ADColorStateList *)getCardBackgroundColor {
  return [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) getBackgroundColorWithADXCardViewDelegate:mCardViewDelegate_];
}

- (jint)getContentPaddingLeft {
  return ((ADRect *) nil_chk(mContentPadding_))->left_;
}

- (jint)getContentPaddingRight {
  return ((ADRect *) nil_chk(mContentPadding_))->right_;
}

- (jint)getContentPaddingTop {
  return ((ADRect *) nil_chk(mContentPadding_))->top_;
}

- (jint)getContentPaddingBottom {
  return ((ADRect *) nil_chk(mContentPadding_))->bottom_;
}

- (void)setRadiusWithFloat:(jfloat)radius {
  [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) setRadiusWithADXCardViewDelegate:mCardViewDelegate_ withFloat:radius];
  [self setMyAttributeWithNSString:@"cornerRadius" withId:JavaLangFloat_valueOfWithFloat_(radius)];
}

- (jfloat)getRadius {
  return [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) getRadiusWithADXCardViewDelegate:mCardViewDelegate_];
}

- (void)setCardElevationWithFloat:(jfloat)elevation {
  [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) setElevationWithADXCardViewDelegate:mCardViewDelegate_ withFloat:elevation];
  [self setMyAttributeWithNSString:@"shadowOffset" withId:JavaLangDouble_valueOfWithDouble_(elevation * JavaLangMath_tanWithDouble_(JavaLangMath_toRadiansWithDouble_(elevation)))];
}

- (jfloat)getCardElevation {
  return [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) getElevationWithADXCardViewDelegate:mCardViewDelegate_];
}

- (void)setMaxCardElevationWithFloat:(jfloat)maxElevation {
  [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) setMaxElevationWithADXCardViewDelegate:mCardViewDelegate_ withFloat:maxElevation];
}

- (jfloat)getMaxCardElevation {
  return [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) getMaxElevationWithADXCardViewDelegate:mCardViewDelegate_];
}

- (jboolean)getPreventCornerOverlap {
  return mPreventCornerOverlap_;
}

- (void)setPreventCornerOverlapWithBoolean:(jboolean)preventCornerOverlap {
  if (preventCornerOverlap != mPreventCornerOverlap_) {
    mPreventCornerOverlap_ = preventCornerOverlap;
    [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) onPreventCornerOverlapChangedWithADXCardViewDelegate:mCardViewDelegate_];
  }
}

- (void)initCardView {
  ADColorStateList *backgroundColor = ADColorStateList_valueOfWithInt_(ADColor_WHITE);
  jfloat radius = ASPluginInvoker_convertDpToPixelWithNSString_(@"10dp");
  jfloat elevation = 0;
  jfloat maxElevation = 0;
  mCompatPadding_ = false;
  mPreventCornerOverlap_ = true;
  jint defaultPadding = 0;
  ((ADRect *) nil_chk(mContentPadding_))->left_ = defaultPadding;
  mContentPadding_->top_ = defaultPadding;
  mContentPadding_->right_ = defaultPadding;
  mContentPadding_->bottom_ = defaultPadding;
  if (elevation > maxElevation) {
    maxElevation = elevation;
  }
  mUserSetMinWidth_ = 0;
  mUserSetMinHeight_ = 0;
  [((id<ADXCardViewImpl>) nil_chk(ADXCardView_IMPL)) initialize__WithADXCardViewDelegate:mCardViewDelegate_ withADContext:[self getContext] withADColorStateList:backgroundColor withFloat:radius withFloat:elevation withFloat:maxElevation];
  [self setRadiusWithFloat:radius];
}

- (void)setBackgroundDrawableWithADDrawable:(ADDrawable *)drawable {
  ADXCardView_setBackgroundDrawableWithADDrawable_(self, drawable);
}

- (void)setBackgroundColorWithADColorStateList:(ADColorStateList *)color {
  ADXCardView_setBackgroundColorWithADColorStateList_(self, color);
}

- (void)dealloc {
  RELEASE_(mContentPadding_);
  RELEASE_(mShadowBounds_);
  RELEASE_(mCardViewDelegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setPaddingWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(setPaddingRelativeWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(getUseCompatPadding);
  methods[4].selector = @selector(setUseCompatPaddingWithBoolean:);
  methods[5].selector = @selector(setContentPaddingWithInt:withInt:withInt:withInt:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(setMinimumWidthWithInt:);
  methods[8].selector = @selector(setMinimumHeightWithInt:);
  methods[9].selector = @selector(setCardBackgroundColorWithInt:);
  methods[10].selector = @selector(setCardBackgroundColorWithADColorStateList:);
  methods[11].selector = @selector(getCardBackgroundColor);
  methods[12].selector = @selector(getContentPaddingLeft);
  methods[13].selector = @selector(getContentPaddingRight);
  methods[14].selector = @selector(getContentPaddingTop);
  methods[15].selector = @selector(getContentPaddingBottom);
  methods[16].selector = @selector(setRadiusWithFloat:);
  methods[17].selector = @selector(getRadius);
  methods[18].selector = @selector(setCardElevationWithFloat:);
  methods[19].selector = @selector(getCardElevation);
  methods[20].selector = @selector(setMaxCardElevationWithFloat:);
  methods[21].selector = @selector(getMaxCardElevation);
  methods[22].selector = @selector(getPreventCornerOverlap);
  methods[23].selector = @selector(setPreventCornerOverlapWithBoolean:);
  methods[24].selector = @selector(initCardView);
  methods[25].selector = @selector(setBackgroundDrawableWithADDrawable:);
  methods[26].selector = @selector(setBackgroundColorWithADColorStateList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IMPL", "LADXCardViewImpl;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "mCompatPadding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPreventCornerOverlap_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUserSetMinWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUserSetMinHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mContentPadding_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mShadowBounds_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mCardViewDelegate_", "LADXCardViewDelegate;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPadding", "IIII", "setPaddingRelative", "setUseCompatPadding", "Z", "setContentPadding", "onMeasure", "II", "setMinimumWidth", "I", "setMinimumHeight", "setCardBackgroundColor", "LADColorStateList;", "setRadius", "F", "setCardElevation", "setMaxCardElevation", "setPreventCornerOverlap", "setBackgroundDrawable", "LADDrawable;", "setBackgroundColor", &ADXCardView_IMPL };
  static const J2ObjcClassInfo _ADXCardView = { "CardView", "androidx.cardview.widget", ptrTable, methods, fields, 7, 0x1, 27, 8, -1, -1, -1, -1, -1 };
  return &_ADXCardView;
}

+ (void)initialize {
  if (self == [ADXCardView class]) {
    ADXCardView_super$_setMinimumHeightWithInt_ = (void (*)(id, SEL, jint))[ADFrameLayout instanceMethodForSelector:@selector(setMinimumHeightWithInt:)];
    ADXCardView_super$_setMinimumWidthWithInt_ = (void (*)(id, SEL, jint))[ADFrameLayout instanceMethodForSelector:@selector(setMinimumWidthWithInt:)];
    ADXCardView_super$_setPaddingWithInt_withInt_withInt_withInt_ = (void (*)(id, SEL, jint, jint, jint, jint))[ADFrameLayout instanceMethodForSelector:@selector(setPaddingWithInt:withInt:withInt:withInt:)];
    {
      JreStrongAssignAndConsume(&ADXCardView_IMPL, new_ADXCardViewApi21Impl_initPackagePrivate());
      [ADXCardView_IMPL initStatic];
    }
    J2OBJC_SET_INITIALIZED(ADXCardView)
  }
}

@end

void ADXCardView_init(ADXCardView *self) {
  ADFrameLayout_init(self);
  JreStrongAssignAndConsume(&self->mContentPadding_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mShadowBounds_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mCardViewDelegate_, new_ADXCardView_1_initWithADXCardView_(self));
}

ADXCardView *new_ADXCardView_init() {
  J2OBJC_NEW_IMPL(ADXCardView, init)
}

ADXCardView *create_ADXCardView_init() {
  J2OBJC_CREATE_IMPL(ADXCardView, init)
}

void ADXCardView_setBackgroundDrawableWithADDrawable_(ADXCardView *self, ADDrawable *drawable) {
  [self setMyAttributeWithNSString:@"background" withId:drawable];
}

void ADXCardView_setBackgroundColorWithADColorStateList_(ADXCardView *self, ADColorStateList *color) {
  ADColorDrawable *value = create_ADColorDrawable_init();
  [value setDrawableWithId:color];
  [self setMyAttributeWithNSString:@"background" withId:value];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCardView)

@implementation ADXCardView_1

- (instancetype)initWithADXCardView:(ADXCardView *)outer$ {
  ADXCardView_1_initWithADXCardView_(self, outer$);
  return self;
}

- (void)setCardBackgroundWithADDrawable:(ADDrawable *)drawable {
  JreStrongAssign(&mCardBackground_, drawable);
  ADXCardView_setBackgroundDrawableWithADDrawable_(this$0_, drawable);
}

- (jboolean)getUseCompatPadding {
  return [this$0_ getUseCompatPadding];
}

- (jboolean)getPreventCornerOverlap {
  return [this$0_ getPreventCornerOverlap];
}

- (void)setShadowPaddingWithInt:(jint)left
                        withInt:(jint)top
                        withInt:(jint)right
                        withInt:(jint)bottom {
  [((ADRect *) nil_chk(this$0_->mShadowBounds_)) setWithInt:left withInt:top withInt:right withInt:bottom];
  ADXCardView_super$_setPaddingWithInt_withInt_withInt_withInt_(this$0_, @selector(setPaddingWithInt:withInt:withInt:withInt:), left + ((ADRect *) nil_chk(this$0_->mContentPadding_))->left_, top + this$0_->mContentPadding_->top_, right + this$0_->mContentPadding_->right_, bottom + this$0_->mContentPadding_->bottom_);
}

- (void)setMinWidthHeightInternalWithInt:(jint)width
                                 withInt:(jint)height {
  if (width > this$0_->mUserSetMinWidth_) {
    ADXCardView_super$_setMinimumWidthWithInt_(this$0_, @selector(setMinimumWidthWithInt:), width);
  }
  if (height > this$0_->mUserSetMinHeight_) {
    ADXCardView_super$_setMinimumHeightWithInt_(this$0_, @selector(setMinimumHeightWithInt:), height);
  }
}

- (ADDrawable *)getCardBackground {
  return mCardBackground_;
}

- (ADView *)getCardView {
  return this$0_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mCardBackground_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXCardView:);
  methods[1].selector = @selector(setCardBackgroundWithADDrawable:);
  methods[2].selector = @selector(getUseCompatPadding);
  methods[3].selector = @selector(getPreventCornerOverlap);
  methods[4].selector = @selector(setShadowPaddingWithInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(setMinWidthHeightInternalWithInt:withInt:);
  methods[6].selector = @selector(getCardBackground);
  methods[7].selector = @selector(getCardView);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXCardView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mCardBackground_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCardView;", "setCardBackground", "LADDrawable;", "setShadowPadding", "IIII", "setMinWidthHeightInternal", "II" };
  static const J2ObjcClassInfo _ADXCardView_1 = { "", "androidx.cardview.widget", ptrTable, methods, fields, 7, 0x8010, 8, 2, 0, -1, -1, -1, -1 };
  return &_ADXCardView_1;
}

@end

void ADXCardView_1_initWithADXCardView_(ADXCardView_1 *self, ADXCardView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXCardView_1 *new_ADXCardView_1_initWithADXCardView_(ADXCardView *outer$) {
  J2OBJC_NEW_IMPL(ADXCardView_1, initWithADXCardView_, outer$)
}

ADXCardView_1 *create_ADXCardView_1_initWithADXCardView_(ADXCardView *outer$) {
  J2OBJC_CREATE_IMPL(ADXCardView_1, initWithADXCardView_, outer$)
}
