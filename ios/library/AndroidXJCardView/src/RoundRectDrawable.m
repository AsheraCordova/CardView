//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidXJCardView\src\main\java\androidx\cardview\widget\RoundRectDrawable.java
//

#include "Color.h"
#include "ColorStateList.h"
#include "Drawable.h"
#include "J2ObjC_source.h"
#include "Rect.h"
#include "RectF.h"
#include "RoundRectDrawable.h"
#include "RoundRectDrawableWithShadow.h"
#include "java/lang/Math.h"


@interface ADXRoundRectDrawable () {
 @public
  jfloat mRadius_;
  ADRectF *mBoundsF_;
  ADRect *mBoundsI_;
  jfloat mPadding_;
  jboolean mInsetForPadding_;
  jboolean mInsetForRadius_;
  ADColorStateList *mBackground_;
}

- (void)setBackgroundWithADColorStateList:(ADColorStateList *)color;

- (void)updateBoundsWithADRect:(ADRect *)bounds;

@end

J2OBJC_FIELD_SETTER(ADXRoundRectDrawable, mBoundsF_, ADRectF *)
J2OBJC_FIELD_SETTER(ADXRoundRectDrawable, mBoundsI_, ADRect *)
J2OBJC_FIELD_SETTER(ADXRoundRectDrawable, mBackground_, ADColorStateList *)

__attribute__((unused)) static void ADXRoundRectDrawable_setBackgroundWithADColorStateList_(ADXRoundRectDrawable *self, ADColorStateList *color);

__attribute__((unused)) static void ADXRoundRectDrawable_updateBoundsWithADRect_(ADXRoundRectDrawable *self, ADRect *bounds);

@implementation ADXRoundRectDrawable

- (instancetype)initPackagePrivateWithADColorStateList:(ADColorStateList *)backgroundColor
                                             withFloat:(jfloat)radius {
  ADXRoundRectDrawable_initPackagePrivateWithADColorStateList_withFloat_(self, backgroundColor, radius);
  return self;
}

- (void)setBackgroundWithADColorStateList:(ADColorStateList *)color {
  ADXRoundRectDrawable_setBackgroundWithADColorStateList_(self, color);
}

- (void)setPaddingWithFloat:(jfloat)padding
                withBoolean:(jboolean)insetForPadding
                withBoolean:(jboolean)insetForRadius {
  if (padding == mPadding_ && mInsetForPadding_ == insetForPadding && mInsetForRadius_ == insetForRadius) {
    return;
  }
  mPadding_ = padding;
  mInsetForPadding_ = insetForPadding;
  mInsetForRadius_ = insetForRadius;
  ADXRoundRectDrawable_updateBoundsWithADRect_(self, nil);
  [self invalidateSelf];
}

- (jfloat)getPadding {
  return mPadding_;
}

- (void)updateBoundsWithADRect:(ADRect *)bounds {
  ADXRoundRectDrawable_updateBoundsWithADRect_(self, bounds);
}

- (void)setRadiusWithFloat:(jfloat)radius {
  if (radius == mRadius_) {
    return;
  }
  mRadius_ = radius;
  ADXRoundRectDrawable_updateBoundsWithADRect_(self, nil);
  [self invalidateSelf];
}

- (jfloat)getRadius {
  return mRadius_;
}

- (void)setColorWithADColorStateList:(ADColorStateList *)color {
  ADXRoundRectDrawable_setBackgroundWithADColorStateList_(self, color);
  [self invalidateSelf];
}

- (ADColorStateList *)getColor {
  return mBackground_;
}

- (void)dealloc {
  RELEASE_(mBoundsF_);
  RELEASE_(mBoundsI_);
  RELEASE_(mBackground_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADColorStateList:withFloat:);
  methods[1].selector = @selector(setBackgroundWithADColorStateList:);
  methods[2].selector = @selector(setPaddingWithFloat:withBoolean:withBoolean:);
  methods[3].selector = @selector(getPadding);
  methods[4].selector = @selector(updateBoundsWithADRect:);
  methods[5].selector = @selector(setRadiusWithFloat:);
  methods[6].selector = @selector(getRadius);
  methods[7].selector = @selector(setColorWithADColorStateList:);
  methods[8].selector = @selector(getColor);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBoundsF_", "LADRectF;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mBoundsI_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPadding_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInsetForPadding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInsetForRadius_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackground_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADColorStateList;F", "setBackground", "LADColorStateList;", "setPadding", "FZZ", "updateBounds", "LADRect;", "setRadius", "F", "setColor" };
  static const J2ObjcClassInfo _ADXRoundRectDrawable = { "RoundRectDrawable", "androidx.cardview.widget", ptrTable, methods, fields, 7, 0x0, 9, 7, -1, -1, -1, -1, -1 };
  return &_ADXRoundRectDrawable;
}

@end

void ADXRoundRectDrawable_initPackagePrivateWithADColorStateList_withFloat_(ADXRoundRectDrawable *self, ADColorStateList *backgroundColor, jfloat radius) {
  ADDrawable_init(self);
  self->mInsetForPadding_ = false;
  self->mInsetForRadius_ = true;
  self->mRadius_ = radius;
  ADXRoundRectDrawable_setBackgroundWithADColorStateList_(self, backgroundColor);
  JreStrongAssignAndConsume(&self->mBoundsF_, new_ADRectF_init());
  JreStrongAssignAndConsume(&self->mBoundsI_, new_ADRect_init());
}

ADXRoundRectDrawable *new_ADXRoundRectDrawable_initPackagePrivateWithADColorStateList_withFloat_(ADColorStateList *backgroundColor, jfloat radius) {
  J2OBJC_NEW_IMPL(ADXRoundRectDrawable, initPackagePrivateWithADColorStateList_withFloat_, backgroundColor, radius)
}

ADXRoundRectDrawable *create_ADXRoundRectDrawable_initPackagePrivateWithADColorStateList_withFloat_(ADColorStateList *backgroundColor, jfloat radius) {
  J2OBJC_CREATE_IMPL(ADXRoundRectDrawable, initPackagePrivateWithADColorStateList_withFloat_, backgroundColor, radius)
}

void ADXRoundRectDrawable_setBackgroundWithADColorStateList_(ADXRoundRectDrawable *self, ADColorStateList *color) {
  JreStrongAssign(&self->mBackground_, (color == nil) ? ADColorStateList_valueOfWithInt_(ADColor_TRANSPARENT) : color);
  [self setDrawableWithId:self->mBackground_];
}

void ADXRoundRectDrawable_updateBoundsWithADRect_(ADXRoundRectDrawable *self, ADRect *bounds) {
  if (bounds == nil) {
    bounds = [self getBounds];
  }
  [((ADRectF *) nil_chk(self->mBoundsF_)) setWithFloat:((ADRect *) nil_chk(bounds))->left_ withFloat:bounds->top_ withFloat:bounds->right_ withFloat:bounds->bottom_];
  [((ADRect *) nil_chk(self->mBoundsI_)) setWithADRect:bounds];
  if (self->mInsetForPadding_) {
    jfloat vInset = ADXRoundRectDrawableWithShadow_calculateVerticalPaddingWithFloat_withFloat_withBoolean_(self->mPadding_, self->mRadius_, self->mInsetForRadius_);
    jfloat hInset = ADXRoundRectDrawableWithShadow_calculateHorizontalPaddingWithFloat_withFloat_withBoolean_(self->mPadding_, self->mRadius_, self->mInsetForRadius_);
    [self->mBoundsI_ insetWithInt:JreFpToInt(JavaLangMath_ceilWithDouble_(hInset)) withInt:JreFpToInt(JavaLangMath_ceilWithDouble_(vInset))];
    [self->mBoundsF_ setWithADRect:self->mBoundsI_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRoundRectDrawable)
