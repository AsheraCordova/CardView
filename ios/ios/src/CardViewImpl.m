//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCardViewPlugin\src\main\java\com\ashera\cardview\CardViewImpl.java
//

#include "BaseHasWidgets.h"
#include "CardView.h"
#include "CardViewImpl.h"
#include "ColorStateList.h"
#include "FrameLayout.h"
#include "HasWidgets.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "Rect.h"
#include "SimpleWrapableView.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"
#include "ASUIScrollView.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASCardViewImpl () {
 @public
  id uiView_;
  ADXCardView *cardView_;
  ASSimpleWrapableView *simpleWrapableView_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setContentPaddingWithId:(id)objValue;

- (void)setContentPaddingBottomWithId:(id)objValue;

- (void)setContentPaddingTopWithId:(id)objValue;

- (void)setContentPaddingRightWithId:(id)objValue;

- (void)setContentPaddingLeftWithId:(id)objValue;

- (void)nativePostCreate;

- (void)createSimpleWrapableView;

- (jboolean)hasScrollView;

- (jboolean)isViewWrapped;

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b;

- (void)invalidateWrapViewHolder;

- (id)getScrollView;

- (void)setShadowOffsetWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

- (void)loadCustomAttributesWithNSString:(NSString *)localName;

@end

J2OBJC_FIELD_SETTER(ASCardViewImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASCardViewImpl, cardView_, ADXCardView *)
J2OBJC_FIELD_SETTER(ASCardViewImpl, simpleWrapableView_, ASSimpleWrapableView *)

inline NSString *ASCardViewImpl_get_FOREGROUND_REGEX(void);
static NSString *ASCardViewImpl_FOREGROUND_REGEX = @"drawForeground";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASCardViewImpl, FOREGROUND_REGEX, NSString *)

inline NSString *ASCardViewImpl_get_VIEW_HOLDER_REGEX(void);
static NSString *ASCardViewImpl_VIEW_HOLDER_REGEX = @"(?!(?:drawForeground)$).*";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASCardViewImpl, VIEW_HOLDER_REGEX, NSString *)

inline NSString *ASCardViewImpl_get_WIDGET_REGEX(void);
static NSString *ASCardViewImpl_WIDGET_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASCardViewImpl, WIDGET_REGEX, NSString *)

__attribute__((unused)) static void ASCardViewImpl_setWidgetOnNativeClass(ASCardViewImpl *self);

__attribute__((unused)) static void ASCardViewImpl_nativeRemoveViewWithASIWidget_(ASCardViewImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASCardViewImpl_createLayoutParamsWithADView_(ASCardViewImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASCardViewImpl_getLayoutParamsWithADView_(ASCardViewImpl *self, ADView *view);

__attribute__((unused)) static void ASCardViewImpl_setContentPaddingWithId_(ASCardViewImpl *self, id objValue);

__attribute__((unused)) static void ASCardViewImpl_setContentPaddingBottomWithId_(ASCardViewImpl *self, id objValue);

__attribute__((unused)) static void ASCardViewImpl_setContentPaddingTopWithId_(ASCardViewImpl *self, id objValue);

__attribute__((unused)) static void ASCardViewImpl_setContentPaddingRightWithId_(ASCardViewImpl *self, id objValue);

__attribute__((unused)) static void ASCardViewImpl_setContentPaddingLeftWithId_(ASCardViewImpl *self, id objValue);

__attribute__((unused)) static void ASCardViewImpl_nativePostCreate(ASCardViewImpl *self);

__attribute__((unused)) static void ASCardViewImpl_createSimpleWrapableView(ASCardViewImpl *self);

__attribute__((unused)) static jboolean ASCardViewImpl_hasScrollView(ASCardViewImpl *self);

__attribute__((unused)) static jboolean ASCardViewImpl_isViewWrapped(ASCardViewImpl *self);

__attribute__((unused)) static void ASCardViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASCardViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASCardViewImpl_invalidateWrapViewHolder(ASCardViewImpl *self);

__attribute__((unused)) static id ASCardViewImpl_getScrollView(ASCardViewImpl *self);

__attribute__((unused)) static void ASCardViewImpl_setShadowOffsetWithId_(ASCardViewImpl *self, id objValue);

__attribute__((unused)) static void ASCardViewImpl_nativeCreateWithJavaUtilMap_(ASCardViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASCardViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASCardViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASCardViewImpl_loadCustomAttributesWithNSString_(ASCardViewImpl *self, NSString *localName);

@interface ASCardViewImpl_CardViewExt () {
 @public
  __unsafe_unretained ASCardViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASCardViewImpl_CardViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASCardViewImpl_CardViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASCardViewImpl_CardViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASCardViewImpl_CardViewExt, templates_, id<JavaUtilMap>)

@interface ASCardViewImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASCardViewImpl_$Lambda$1)

__attribute__((unused)) static void ASCardViewImpl_$Lambda$1_initWithASIWidget_(ASCardViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASCardViewImpl_$Lambda$1 *new_ASCardViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCardViewImpl_$Lambda$1 *create_ASCardViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

NSString *ASCardViewImpl_LOCAL_NAME = @"androidx.cardview.widget.CardView";
NSString *ASCardViewImpl_GROUP_NAME = @"androidx.cardview.widget.CardView";

@implementation ASCardViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cardUseCompatPadding"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cardBackgroundColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentPaddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentPaddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentPaddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentPaddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentPadding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cardCornerRadius"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cardElevation"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cardMaxElevation"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cardPreventCornerOverlap"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureAllChildren"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowOffset"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
  ASCardViewImpl_loadCustomAttributesWithNSString_(self, localName);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCardViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASCardViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASCardViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASCardViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  cardView_ = new_ASCardViewImpl_CardViewExt_initWithASCardViewImpl_(self);
  ASCardViewImpl_createSimpleWrapableView(self);
  ASCardViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASCardViewImpl_setWidgetOnNativeClass(self);
  ASCardViewImpl_nativePostCreate(self);
}

- (void)setWidgetOnNativeClass {
  ASCardViewImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return cardView_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXCardView *) nil_chk(cardView_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASCardViewImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXCardView *) nil_chk(cardView_)) getChildCount]) {
    [((ADXCardView *) nil_chk(cardView_)) removeViewAtWithInt:index];
    ASCardViewImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASCardViewImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASCardViewImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXCardView *) nil_chk(cardView_)) addViewWithADView:view];
    }
    else {
      [((ADXCardView *) nil_chk(cardView_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASCardViewImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASCardViewImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASCardViewImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASCardViewImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASCardViewImpl_CardViewExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, simpleWrapableView_, key, strValue, objValue, decorator);
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"cardUseCompatPadding", @"cardBackgroundColor", @"contentPaddingLeft", @"contentPaddingRight", @"contentPaddingTop", @"contentPaddingBottom", @"contentPadding", @"cardCornerRadius", @"cardElevation", @"cardMaxElevation", @"cardPreventCornerOverlap", @"measureAllChildren", @"shadowOffset" }, 13)) {
    case 0:
    {
      [((ADXCardView *) nil_chk(cardView_)) setUseCompatPaddingWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 1:
    {
      [((ADXCardView *) nil_chk(cardView_)) setCardBackgroundColorWithADColorStateList:(ADColorStateList *) cast_chk(objValue, [ADColorStateList class])];
    }
    break;
    case 2:
    {
      ASCardViewImpl_setContentPaddingLeftWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASCardViewImpl_setContentPaddingRightWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASCardViewImpl_setContentPaddingTopWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASCardViewImpl_setContentPaddingBottomWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASCardViewImpl_setContentPaddingWithId_(self, objValue);
    }
    break;
    case 7:
    {
      [((ADXCardView *) nil_chk(cardView_)) setRadiusWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 8:
    {
      [((ADXCardView *) nil_chk(cardView_)) setCardElevationWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 9:
    {
      [((ADXCardView *) nil_chk(cardView_)) setMaxCardElevationWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 10:
    {
      [((ADXCardView *) nil_chk(cardView_)) setPreventCornerOverlapWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 11:
    {
      [((ADXCardView *) nil_chk(cardView_)) setMeasureAllChildrenWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 12:
    {
      ASCardViewImpl_setShadowOffsetWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"measureAllChildren" }, 1)) {
    case 0:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADXCardView *) nil_chk(cardView_)) getMeasureAllChildren]);
      }
    }
  }
  return nil;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
  if (ASCardViewImpl_isViewWrapped(self)) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView]);
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] != nil) {
      ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground]);
    }
  }
}

- (void)setContentPaddingWithId:(id)objValue {
  ASCardViewImpl_setContentPaddingWithId_(self, objValue);
}

- (void)setContentPaddingBottomWithId:(id)objValue {
  ASCardViewImpl_setContentPaddingBottomWithId_(self, objValue);
}

- (void)setContentPaddingTopWithId:(id)objValue {
  ASCardViewImpl_setContentPaddingTopWithId_(self, objValue);
}

- (void)setContentPaddingRightWithId:(id)objValue {
  ASCardViewImpl_setContentPaddingRightWithId_(self, objValue);
}

- (void)setContentPaddingLeftWithId:(id)objValue {
  ASCardViewImpl_setContentPaddingLeftWithId_(self, objValue);
}

- (void)nativePostCreate {
  ASCardViewImpl_nativePostCreate(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXCardView *) nil_chk(cardView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)createSimpleWrapableView {
  ASCardViewImpl_createSimpleWrapableView(self);
}

- (jboolean)hasScrollView {
  return ASCardViewImpl_hasScrollView(self);
}

- (jboolean)isViewWrapped {
  return ASCardViewImpl_isViewWrapped(self);
}

- (void)addForegroundIfNeeded {
  if (ASCardViewImpl_isViewWrapped(self) && ![((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) isDisableForeground]) {
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] == nil) {
      id foreground = [self nativeAddForeGroundWithASIWidget:self];
      ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget], foreground);
      [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) setForegroundWithId:foreground];
    }
  }
}

- (id)getForeground {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground];
}

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b {
  ASCardViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)asNativeWidget {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget];
}

- (void)invalidateWrapViewHolder {
  ASCardViewImpl_invalidateWrapViewHolder(self);
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(jint)viewtype {
  uiView_ = [self nativeCreateViewWithInt:viewtype];
  ASViewGroupImpl_nativeAddViewWithId_withId_(ASViewImpl_getFirstChildOrSelfWithId_(wrapperParent), uiView_);
  return uiView_;
}

- (id)createWrapperViewHolderWithInt:(jint)viewType {
  return [self createWrapperViewHolderNativeWithInt:viewType];
}

- (id)nativeAddForeGroundWithASIWidget:(id<ASIWidget>)w {
  ASUIView* uiView = [ASUIView new];
  uiView.widget = w;
  uiView.commandRegex  = ASCardViewImpl_FOREGROUND_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)createWrapperViewHolderNativeWithInt:(jint)viewType {
  if (viewType == 1) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.commandRegex  = ASCardViewImpl_VIEW_HOLDER_REGEX;
    uiView.backgroundColor = [UIColor clearColor];
    
    return uiView;
  }
  
  if (viewType == 2 || viewType == 3) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.backgroundColor = [UIColor clearColor];
    uiView.commandRegex  = ASCardViewImpl_VIEW_HOLDER_REGEX;
    
    ASUIScrollView* scrollview = [ASUIScrollView new];
    scrollview.scrollEnabled=YES;
    scrollview.bounces=NO;
    scrollview.preventAutoScroll=YES;
    scrollview.delaysContentTouches=YES;
    scrollview.userInteractionEnabled=YES;
    scrollview.widget = self;
    scrollview.backgroundColor = [UIColor clearColor];
    scrollview.commandRegex  = @"none";
    [uiView addSubview:scrollview];
    return uiView;
  }
  
  return nil;
}

- (id)getScrollView {
  return ASCardViewImpl_getScrollView(self);
}

- (void)setShadowOffsetWithId:(id)objValue {
  ASCardViewImpl_setShadowOffsetWithId_(self, objValue);
}

- (void)nativeSetShadowOffsetWithId:(id)myView
                          withFloat:(jfloat)shadowOffset {
  UIView* uiView = (UIView*)myView;
  uiView.layer.shadowColor = [UIColor blackColor].CGColor;
  uiView.layer.shadowOffset = CGSizeMake(shadowOffset, shadowOffset);
  uiView.layer.shadowOpacity = 0.7;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASCardViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASCardViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)nativeCreateViewWithInt:(jint)viewType {
  ASUIView* uiView = [ASUIView new];
  uiView.commandRegex = ASCardViewImpl_WIDGET_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (void)loadCustomAttributesWithNSString:(NSString *)localName {
  ASCardViewImpl_loadCustomAttributesWithNSString_(self, localName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 37, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 38, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 39, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, 45, -1, -1 },
    { NULL, "V", 0x2, 46, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 47, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(requestLayout);
  methods[21].selector = @selector(invalidate);
  methods[22].selector = @selector(setContentPaddingWithId:);
  methods[23].selector = @selector(setContentPaddingBottomWithId:);
  methods[24].selector = @selector(setContentPaddingTopWithId:);
  methods[25].selector = @selector(setContentPaddingRightWithId:);
  methods[26].selector = @selector(setContentPaddingLeftWithId:);
  methods[27].selector = @selector(nativePostCreate);
  methods[28].selector = @selector(setIdWithNSString:);
  methods[29].selector = @selector(setVisibleWithBoolean:);
  methods[30].selector = @selector(createSimpleWrapableView);
  methods[31].selector = @selector(hasScrollView);
  methods[32].selector = @selector(isViewWrapped);
  methods[33].selector = @selector(addForegroundIfNeeded);
  methods[34].selector = @selector(getForeground);
  methods[35].selector = @selector(setForegroundFrameWithInt:withInt:withInt:withInt:);
  methods[36].selector = @selector(asNativeWidget);
  methods[37].selector = @selector(invalidateWrapViewHolder);
  methods[38].selector = @selector(createWrapperViewWithId:withInt:);
  methods[39].selector = @selector(createWrapperViewHolderWithInt:);
  methods[40].selector = @selector(nativeAddForeGroundWithASIWidget:);
  methods[41].selector = @selector(createWrapperViewHolderNativeWithInt:);
  methods[42].selector = @selector(getScrollView);
  methods[43].selector = @selector(setShadowOffsetWithId:);
  methods[44].selector = @selector(nativeSetShadowOffsetWithId:withFloat:);
  methods[45].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[46].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[47].selector = @selector(nativeCreateViewWithInt:);
  methods[48].selector = @selector(loadCustomAttributesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOREGROUND_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "VIEW_HOLDER_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "WIDGET_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 52, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "cardView_", "LADXCardView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "simpleWrapableView_", "LASSimpleWrapableView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setContentPadding", "LNSObject;", "setContentPaddingBottom", "setContentPaddingTop", "setContentPaddingRight", "setContentPaddingLeft", "setId", "setVisible", "Z", "setForegroundFrame", "IIII", "createWrapperView", "LNSObject;I", "createWrapperViewHolder", "nativeAddForeGround", "createWrapperViewHolderNative", "setShadowOffset", "nativeSetShadowOffset", "LNSObject;F", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "nativeMakeFrameForChildWidget", "nativeCreateView", "loadCustomAttributes", &ASCardViewImpl_FOREGROUND_REGEX, &ASCardViewImpl_VIEW_HOLDER_REGEX, &ASCardViewImpl_WIDGET_REGEX, &ASCardViewImpl_LOCAL_NAME, &ASCardViewImpl_GROUP_NAME, "LASCardViewImpl_CardViewExt;" };
  static const J2ObjcClassInfo _ASCardViewImpl = { "CardViewImpl", "com.ashera.cardview", ptrTable, methods, fields, 7, 0x1, 49, 8, -1, 54, -1, -1, -1 };
  return &_ASCardViewImpl;
}

@end

void ASCardViewImpl_init(ASCardViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASCardViewImpl_GROUP_NAME, ASCardViewImpl_LOCAL_NAME);
}

ASCardViewImpl *new_ASCardViewImpl_init() {
  J2OBJC_NEW_IMPL(ASCardViewImpl, init)
}

ASCardViewImpl *create_ASCardViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASCardViewImpl, init)
}

void ASCardViewImpl_initWithNSString_(ASCardViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASCardViewImpl_GROUP_NAME, localname);
}

ASCardViewImpl *new_ASCardViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASCardViewImpl, initWithNSString_, localname)
}

ASCardViewImpl *create_ASCardViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASCardViewImpl, initWithNSString_, localname)
}

void ASCardViewImpl_initWithNSString_withNSString_(ASCardViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASCardViewImpl *new_ASCardViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASCardViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASCardViewImpl *create_ASCardViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASCardViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASCardViewImpl_setWidgetOnNativeClass(ASCardViewImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASCardViewImpl_nativeRemoveViewWithASIWidget_(ASCardViewImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXCardView *) nil_chk(self->cardView_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASCardViewImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASCardViewImpl_createLayoutParamsWithADView_(ASCardViewImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASCardViewImpl_getLayoutParamsWithADView_(ASCardViewImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASCardViewImpl_setContentPaddingWithId_(ASCardViewImpl *self, id objValue) {
  ASCardViewImpl_setContentPaddingBottomWithId_(self, objValue);
  ASCardViewImpl_setContentPaddingTopWithId_(self, objValue);
  ASCardViewImpl_setContentPaddingRightWithId_(self, objValue);
  ASCardViewImpl_setContentPaddingLeftWithId_(self, objValue);
}

void ASCardViewImpl_setContentPaddingBottomWithId_(ASCardViewImpl *self, id objValue) {
  [((ADXCardView *) nil_chk(self->cardView_)) setContentPaddingWithInt:[self->cardView_ getContentPaddingLeft] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingTop] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingRight] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCardViewImpl_setContentPaddingTopWithId_(ASCardViewImpl *self, id objValue) {
  [((ADXCardView *) nil_chk(self->cardView_)) setContentPaddingWithInt:[self->cardView_ getContentPaddingLeft] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingRight] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingBottom]];
}

void ASCardViewImpl_setContentPaddingRightWithId_(ASCardViewImpl *self, id objValue) {
  [((ADXCardView *) nil_chk(self->cardView_)) setContentPaddingWithInt:[self->cardView_ getContentPaddingLeft] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingTop] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingBottom]];
}

void ASCardViewImpl_setContentPaddingLeftWithId_(ASCardViewImpl *self, id objValue) {
  [((ADXCardView *) nil_chk(self->cardView_)) setContentPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[self->cardView_ getContentPaddingTop] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingRight] withInt:[((ADXCardView *) nil_chk(self->cardView_)) getContentPaddingBottom]];
}

void ASCardViewImpl_nativePostCreate(ASCardViewImpl *self) {
  [((ADXCardView *) nil_chk(self->cardView_)) initCardView];
}

void ASCardViewImpl_createSimpleWrapableView(ASCardViewImpl *self) {
  jboolean wrapViewFeature = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"decorator"];
  jint viewType = -1;
  if (wrapViewFeature) {
    jboolean hscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"hscroll"];
    jboolean vscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"vscroll"];
    viewType = 1;
    if (hscroll) viewType = 2;
    if (vscroll) viewType = 3;
  }
  self->simpleWrapableView_ = new_ASSimpleWrapableView_initWithASIWidget_withInt_(self, viewType);
}

jboolean ASCardViewImpl_hasScrollView(ASCardViewImpl *self) {
  return ASCardViewImpl_isViewWrapped(self) && ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 2 || [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 3);
}

jboolean ASCardViewImpl_isViewWrapped(ASCardViewImpl *self) {
  return [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped];
}

void ASCardViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASCardViewImpl *self, jint l, jint t, jint r, jint b) {
  id foreground = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getForeground];
  if (foreground != nil) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(foreground, 0, 0, r - l, b - t);
  }
}

void ASCardViewImpl_invalidateWrapViewHolder(ASCardViewImpl *self) {
  if (ASCardViewImpl_isViewWrapped(self)) {
    ASViewImpl_nativeInvalidateWithId_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]);
  }
}

id ASCardViewImpl_getScrollView(ASCardViewImpl *self) {
  UIView* uiview = (UIView*)[self->simpleWrapableView_ getWrapperViewHolder];
  return uiview.subviews[0];
}

void ASCardViewImpl_setShadowOffsetWithId_(ASCardViewImpl *self, id objValue) {
  [self nativeSetShadowOffsetWithId:[((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder] withFloat:[((NSNumber *) nil_chk(((NSNumber *) cast_chk(objValue, [NSNumber class])))) floatValue]];
}

void ASCardViewImpl_nativeCreateWithJavaUtilMap_(ASCardViewImpl *self, id<JavaUtilMap> params) {
}

void ASCardViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASCardViewImpl *self, jint l, jint t, jint r, jint b) {
  if ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped]) {
    ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrappedView], 0, 0, r - l, b - t);
  }
}

void ASCardViewImpl_loadCustomAttributesWithNSString_(ASCardViewImpl *self, NSString *localName) {
  id<JavaUtilCollection> attributes = ASWidgetFactory_getAttributesWithNSString_(localName);
  for (ASWidgetAttribute * __strong widgetAttribute in nil_chk(attributes)) {
    if (![((NSString *) nil_chk([((ASWidgetAttribute *) nil_chk(widgetAttribute)) getAttributeName])) java_hasPrefix:@"outline"]) {
      [widgetAttribute setSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_WRAPPER];
    }
    else {
      [widgetAttribute setSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCardViewImpl)

@implementation ASCardViewImpl_CardViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASCardViewImpl:(ASCardViewImpl *)outer$ {
  ASCardViewImpl_CardViewExt_initWithASCardViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
    ASCardViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASCardViewImpl_CardViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASCardViewImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCardViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASCardViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASCardViewImpl_CardViewExt = { "CardViewExt", "com.ashera.cardview", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASCardViewImpl_CardViewExt;
}

@end

void ASCardViewImpl_CardViewExt_initWithASCardViewImpl_(ASCardViewImpl_CardViewExt *self, ASCardViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXCardView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASCardViewImpl_CardViewExt *new_ASCardViewImpl_CardViewExt_initWithASCardViewImpl_(ASCardViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASCardViewImpl_CardViewExt, initWithASCardViewImpl_, outer$)
}

ASCardViewImpl_CardViewExt *create_ASCardViewImpl_CardViewExt_initWithASCardViewImpl_(ASCardViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASCardViewImpl_CardViewExt, initWithASCardViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCardViewImpl_CardViewExt)

@implementation ASCardViewImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASCardViewImpl_$Lambda$1_initWithASIWidget_(ASCardViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASCardViewImpl_$Lambda$1 *new_ASCardViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASCardViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASCardViewImpl_$Lambda$1 *create_ASCardViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASCardViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
